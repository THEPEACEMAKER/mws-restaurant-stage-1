"use strict";function openDatabase(){return navigator.serviceWorker?idb.open("restaurantsDB",1,function(e){e.createObjectStore("restaurantsOS",{keyPath:"id"})}):Promise.resolve()}function addRestaurantsToCache(e){openDatabase().then(function(t){if(t){var n=t.transaction("restaurantsOS","readwrite"),r=n.objectStore("restaurantsOS");return null==e.length?r.put(e):e.forEach(function(e){r.put(e)}),n.complete}}).then(function(){})}function showCachedRestaurants(){return openDatabase().then(function(e){return e.transaction("restaurantsOS").objectStore("restaurantsOS").getAll()}).then(function(e){return e})}function showCachedRestaurant(e){return openDatabase().then(function(t){var n=t.transaction("restaurantsOS").objectStore("restaurantsOS");return e=parseInt(e),n.get(e)}).then(function(e){return e})}!function(){function e(e){return new Promise(function(t,n){e.onsuccess=function(){t(e.result)},e.onerror=function(){n(e.error)}})}function t(t,n,r){var o,a=new Promise(function(a,u){e(o=t[n].apply(t,r)).then(a,u)});return a.request=o,a}function n(e,t,n){n.forEach(function(n){Object.defineProperty(e.prototype,n,{get:function(){return this[t][n]},set:function(e){this[t][n]=e}})})}function r(e,n,r,o){o.forEach(function(o){o in r.prototype&&(e.prototype[o]=function(){return t(this[n],o,arguments)})})}function o(e,t,n,r){r.forEach(function(r){r in n.prototype&&(e.prototype[r]=function(){return this[t][r].apply(this[t],arguments)})})}function a(e,n,r,o){o.forEach(function(o){o in r.prototype&&(e.prototype[o]=function(){return e=this[n],(r=t(e,o,arguments)).then(function(e){if(e)return new i(e,r.request)});var e,r})})}function u(e){this._index=e}function i(e,t){this._cursor=e,this._request=t}function s(e){this._store=e}function c(e){this._tx=e,this.complete=new Promise(function(t,n){e.oncomplete=function(){t()},e.onerror=function(){n(e.error)},e.onabort=function(){n(e.error)}})}function l(e,t,n){this._db=e,this.oldVersion=t,this.transaction=new c(n)}function f(e){this._db=e}n(u,"_index",["name","keyPath","multiEntry","unique"]),r(u,"_index",IDBIndex,["get","getKey","getAll","getAllKeys","count"]),a(u,"_index",IDBIndex,["openCursor","openKeyCursor"]),n(i,"_cursor",["direction","key","primaryKey","value"]),r(i,"_cursor",IDBCursor,["update","delete"]),["advance","continue","continuePrimaryKey"].forEach(function(t){t in IDBCursor.prototype&&(i.prototype[t]=function(){var n=this,r=arguments;return Promise.resolve().then(function(){return n._cursor[t].apply(n._cursor,r),e(n._request).then(function(e){if(e)return new i(e,n._request)})})})}),s.prototype.createIndex=function(){return new u(this._store.createIndex.apply(this._store,arguments))},s.prototype.index=function(){return new u(this._store.index.apply(this._store,arguments))},n(s,"_store",["name","keyPath","indexNames","autoIncrement"]),r(s,"_store",IDBObjectStore,["put","add","delete","clear","get","getAll","getKey","getAllKeys","count"]),a(s,"_store",IDBObjectStore,["openCursor","openKeyCursor"]),o(s,"_store",IDBObjectStore,["deleteIndex"]),c.prototype.objectStore=function(){return new s(this._tx.objectStore.apply(this._tx,arguments))},n(c,"_tx",["objectStoreNames","mode"]),o(c,"_tx",IDBTransaction,["abort"]),l.prototype.createObjectStore=function(){return new s(this._db.createObjectStore.apply(this._db,arguments))},n(l,"_db",["name","version","objectStoreNames"]),o(l,"_db",IDBDatabase,["deleteObjectStore","close"]),f.prototype.transaction=function(){return new c(this._db.transaction.apply(this._db,arguments))},n(f,"_db",["name","version","objectStoreNames"]),o(f,"_db",IDBDatabase,["close"]),["openCursor","openKeyCursor"].forEach(function(e){[s,u].forEach(function(t){e in t.prototype&&(t.prototype[e.replace("open","iterate")]=function(){var t,n=(t=arguments,Array.prototype.slice.call(t)),r=n[n.length-1],o=this._store||this._index,a=o[e].apply(o,n.slice(0,-1));a.onsuccess=function(){r(a.result)}})})}),[u,s].forEach(function(e){e.prototype.getAll||(e.prototype.getAll=function(e,t){var n=this,r=[];return new Promise(function(o){n.iterateCursor(e,function(e){e?(r.push(e.value),void 0===t||r.length!=t?e.continue():o(r)):o(r)})})})});var h={open:function(e,n,r){var o=t(indexedDB,"open",[e,n]),a=o.request;return a&&(a.onupgradeneeded=function(e){r&&r(new l(a.result,e.oldVersion,a.transaction))}),o.then(function(e){return new f(e)})},delete:function(e){return t(indexedDB,"deleteDatabase",[e])}};"undefined"!=typeof module?(module.exports=h,module.exports.default=module.exports):self.idb=h}();var _createClass=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var map,DBHelper=function(){function e(){_classCallCheck(this,e)}return _createClass(e,null,[{key:"fetchRestaurants",value:function(t){showCachedRestaurants().then(function(n){0!=n.length?t(null,n):fetch(e.DATABASE_URL).then(function(e){return e.json()}).then(function(e){t(null,e),addRestaurantsToCache(e)}).catch(function(e){console.log(e),t(e,null)})}).catch(function(n){console.log(n),fetch(e.DATABASE_URL).then(function(e){return e.json()}).then(function(e){t(null,e),addRestaurantsToCache(e)}).catch(function(e){console.log(e),t(e,null)})})}},{key:"fetchRestaurantById",value:function(t,n){showCachedRestaurant(t).then(function(r){null!=r?n(null,r):fetch(e.DATABASE_URL+"/"+t).then(function(e){return e.json()}).then(function(e){n(null,e),addRestaurantsToCache(e)}).catch(function(e){console.log(e),n(e,null)})}).catch(function(r){console.log(r),fetch(e.DATABASE_URL+"/"+t).then(function(e){return e.json()}).then(function(e){n(null,e),addRestaurantsToCache(e)}).catch(function(e){console.log(e),n(e,null)})})}},{key:"fetchRestaurantByCuisine",value:function(t,n){e.fetchRestaurants(function(e,r){if(e)n(e,null);else{var o=r.filter(function(e){return e.cuisine_type==t});n(null,o)}})}},{key:"fetchRestaurantByNeighborhood",value:function(t,n){e.fetchRestaurants(function(e,r){if(e)n(e,null);else{var o=r.filter(function(e){return e.neighborhood==t});n(null,o)}})}},{key:"fetchRestaurantByCuisineAndNeighborhood",value:function(t,n,r){e.fetchRestaurants(function(e,o){if(e)r(e,null);else{var a=o;"all"!=t&&(a=a.filter(function(e){return e.cuisine_type==t})),"all"!=n&&(a=a.filter(function(e){return e.neighborhood==n})),r(null,a)}})}},{key:"fetchNeighborhoods",value:function(t){e.fetchRestaurants(function(e,n){if(e)t(e,null);else{var r=n.map(function(e,t){return n[t].neighborhood}),o=r.filter(function(e,t){return r.indexOf(e)==t});t(null,o)}})}},{key:"fetchCuisines",value:function(t){e.fetchRestaurants(function(e,n){if(e)t(e,null);else{var r=n.map(function(e,t){return n[t].cuisine_type}),o=r.filter(function(e,t){return r.indexOf(e)==t});t(null,o)}})}},{key:"urlForRestaurant",value:function(e){return"./restaurant.html?id="+e.id}},{key:"imageUrlForRestaurant",value:function(e){return"/img/"+e.photograph}},{key:"mapMarkerForRestaurant",value:function(t,n){return new google.maps.Marker({position:t.latlng,title:t.name,url:e.urlForRestaurant(t),map:n,animation:google.maps.Animation.DROP})}},{key:"DATABASE_URL",get:function(){return"http://localhost:1337/restaurants"}}]),e}(),restaurants=void 0,neighborhoods=void 0,cuisines=void 0,markers=[];document.addEventListener("DOMContentLoaded",function(e){fetchNeighborhoods(),fetchCuisines()}),fetchNeighborhoods=function(){DBHelper.fetchNeighborhoods(function(e,t){e?console.error(e):(self.neighborhoods=t,fillNeighborhoodsHTML())})},fillNeighborhoodsHTML=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:self.neighborhoods,t=document.getElementById("neighborhoods-select");e.forEach(function(e){var n=document.createElement("option");n.innerHTML=e,n.value=e,t.append(n)})},fetchCuisines=function(){DBHelper.fetchCuisines(function(e,t){e?console.error(e):(self.cuisines=t,fillCuisinesHTML())})},fillCuisinesHTML=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:self.cuisines,t=document.getElementById("cuisines-select");e.forEach(function(e){var n=document.createElement("option");n.innerHTML=e,n.value=e,t.append(n)})},window.initMap=function(){self.map=new google.maps.Map(document.getElementById("map"),{zoom:12,center:{lat:40.722216,lng:-73.987501},scrollwheel:!1}),updateRestaurants()},updateRestaurants=function(){var e=document.getElementById("cuisines-select"),t=document.getElementById("neighborhoods-select"),n=e.selectedIndex,r=t.selectedIndex,o=e[n].value,a=t[r].value;DBHelper.fetchRestaurantByCuisineAndNeighborhood(o,a,function(e,t){e?console.error(e):(resetRestaurants(t),fillRestaurantsHTML())});var u=t.querySelector("option[aria-selected='true']");u&&u.removeAttribute("aria-selected");var i=e.querySelector("option[aria-selected='true']");i&&i.removeAttribute("aria-selected"),t[r].setAttribute("aria-selected","true"),e[n].setAttribute("aria-selected","true")},resetRestaurants=function(e){self.restaurants=[],document.getElementById("restaurants-list").innerHTML="",self.markers.forEach(function(e){return e.setMap(null)}),self.markers=[],self.restaurants=e},fillRestaurantsHTML=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:self.restaurants,t=document.getElementById("restaurants-list");e.forEach(function(e){t.append(createRestaurantHTML(e))}),addMarkersToMap()},createRestaurantHTML=function(e){var t=document.createElement("li"),n=document.createElement("div");n.className="restaurant-item",t.append(n);var r=document.createElement("img");r.className="restaurant-img",r.setAttribute("alt",e.name+" restaurant image"),r.src="/img/"+e.id+"-300w.jpg",r.setAttribute("srcset","/img/"+e.id+"-300w.jpg 300w, /img/"+e.id+"-400w.jpg 400w"),r.setAttribute("sizes","(max-width: 450px) 300px, (max-width: 650px) 400px, (max-width: 875px) 300px, (max-width: 1000px) 400px, 300px"),n.append(r);var o=document.createElement("h3");o.innerHTML=e.name,n.append(o);var a=document.createElement("p");a.innerHTML=e.neighborhood,n.append(a);var u=document.createElement("p");u.innerHTML=e.address,n.append(u);var i=document.createElement("a");return i.innerHTML="View Details",i.href=DBHelper.urlForRestaurant(e),n.append(i),t},addMarkersToMap=function(){(arguments.length>0&&void 0!==arguments[0]?arguments[0]:self.restaurants).forEach(function(e){var t=DBHelper.mapMarkerForRestaurant(e,self.map);google.maps.event.addListener(t,"click",function(){window.location.href=t.url}),self.markers.push(t)})};
//# sourceMappingURL=data:application/json;charset=utf8;base64,
